definitions:
  model.Account:
    properties:
      commentCount:
        type: integer
      id:
        type: string
      likeCount:
        type: integer
      myDnftCount:
        type: integer
      myTravelCount:
        type: integer
      nickName:
        type: string
      walletAccount:
        type: string
    type: object
  model.DayItem:
    properties:
      dayTime:
        type: string
      items:
        additionalProperties:
          $ref: '#/definitions/model.Item'
        type: object
    type: object
  model.EncyclopediaDNFT:
    properties:
      badgeTier:
        description: 티어
        type: string
      dnftBronzeUrl:
        description: 브론즈 URL
        type: string
      dnftCountry:
        description: 국가
        type: string
      dnftGoldUrl:
        description: 골드 URL
        type: string
      dnftId:
        description: 전체 dnftID
        type: integer
      dnftImgUrl:
        description: 이미지URL로 쓸 변수
        type: string
      dnftSilverUrl:
        description: 실버 URL
        type: string
      dnftTime:
        description: 발급 시간
        type: string
      issueCount:
        description: 계정별, 국가별 발급횟수를 체크하는 변수
        type: integer
      latitude:
        description: 위도
        type: number
      longitude:
        description: 경도
        type: number
      walletAccount:
        description: 지갑계정
        type: string
    type: object
  model.Item:
    properties:
      description:
        type: string
      endDate:
        type: string
      imgSrc:
        type: string
      memo:
        type: string
      startDate:
        type: string
      title:
        type: string
    type: object
  model.TripPlan:
    properties:
      days:
        additionalProperties:
          $ref: '#/definitions/model.DayItem'
        type: object
      nickName:
        type: string
      travelId:
        type: integer
      tripArrival:
        type: string
      tripCountry:
        type: string
      tripDeparture:
        type: string
      tripTitle:
        type: string
      walletAccount:
        type: string
    type: object
info:
  contact: {}
paths:
  /v01/acc/profile:
    get:
      consumes:
      - application/json
      description: 유저 프로필 정보를 가져는 함수다. 다음과 같은 정보를 가져온다. [닉네임, 나의 여행계획 카운트, 나의 Dynamic
        NFT 카운트, 좋아요 카운트 , 댓글 카운트]
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: nickName
        in: path
        name: nickName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
      summary: 계정주소를 입력합니다.
      tags:
      - UserProfileHandler(나의 프로필 정보 가져오기)
  /v01/acc/register:
    post:
      consumes:
      - application/json
      description: 유저 닉네임을 등록 및 수정 해주는 함수로 지갑계정으로 연결 후 사용자가 닉네임을 입력할 수 있다. 이후 닉네임
        수정은 자유롭게 가능하다.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: nickName
        in: path
        name: nickName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
      summary: 계정주소, 닉네임을 입력합니다.
      tags:
      - UserRegisterHandler(닉네임 등록/수정)
  /v01/badge/issue:
    post:
      consumes:
      - application/json
      description: 위도, 경도를 입력받고 해당하는 나라의 리소스(ipfs uri, nft metadata)를 참고해서 뱃지를 발급해줍니다.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: latitude
        in: path
        name: latitude
        required: true
        type: string
      - description: longitude
        in: path
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EncyclopediaDNFT'
            type: array
      summary: 지갑계정, 위도, 경도를 입력해줍니다.
      tags:
      - CreateBadge(뱃지 발급)
  /v01/badge/user:
    get:
      consumes:
      - application/json
      description: 사용자 위치를 참고해서 뱃지를 발급하는 함수
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EncyclopediaDNFT'
            type: array
      summary: 지갑계정을 입력해줍니다.
      tags:
      - GetMyBadge(나의 뱃지 가져오기)
  /v01/trip/allplan:
    get:
      consumes:
      - application/json
      description: 모든 여행계획을  MongoDB에서 가져오는 함수. 아무 파라미터가 없다 전체를 조회한다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: 모든 여행계획을 가져온다.
      tags:
      - GetAllTrip(전체 여행계획 가져오기)
  /v01/trip/myplan:
    get:
      consumes:
      - application/json
      description: 나의 여행계획을 MongoDB에서 가져오는 함수, 계정주소로 파악한 후 가져온다.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: 지갑계정을 입력한다.
      tags:
      - GetMyTrip(나의 여행계획 가져오기)
    post:
      consumes:
      - application/json
      description: days에는 day1, day2단위로 아이템이 있고 각 day1별로 시간과 imtes가 있으며 각각 여행시작시간,
        종료시간, 이미지, 타이틀, 설명, 메모등을 입력할 수 있습니다.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: travelTitle
        in: path
        name: travelTitle
        required: true
        type: string
      - description: tripCountry
        in: path
        name: tripCountry
        required: true
        type: string
      - description: tripDeparture
        in: path
        name: tripDeparture
        required: true
        type: string
      - description: tripArrival
        in: path
        name: tripArrival
        required: true
        type: string
      - description: days
        in: path
        name: days
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: 지갑계정, 제목, 나라, 출발날짜, 도착날짜 등을 입력합니다. days는 아이템을 담은 배열입니다.
      tags:
      - CreateTripPlan(나의 여행계획표 생성하기)
  /v01/trip/search:
    get:
      consumes:
      - application/json
      description: 여행계획의 제목 중 일치하는 문자열에 대해 콘텐츠를 리스폰스해주는 검색 API, 단어 단위로 구현, 예를 들어 Paris로
        무작정이라고 하면 "Paris로" 까지 입력해야된다. q="Paris로" 이런식으로 입력하면 된다.
      parameters:
      - description: q
        in: path
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: q에 검색하고자 하는 키워드를 입력한다.
      tags:
      - SearchTrip(여행계획 단어단위 검색하기)
swagger: "2.0"
