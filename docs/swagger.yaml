definitions:
  model.Account:
    properties:
      accountId:
        description: 계정 ID
        type: integer
      commentCount:
        description: 댓글 카운트
        type: integer
      likeCount:
        description: 좋아요 카운트
        type: integer
      myDnftCount:
        description: DNFT뱃지 카운트
        type: integer
      myTripCount:
        description: 여행계획 카운트
        type: integer
      nickName:
        description: 닉네임
        type: string
      walletAccount:
        description: 지갑 계정 주소
        type: string
    type: object
  model.DayItem:
    properties:
      endDate:
        description: "세부 여행 종료날짜 \t/예시  : 15:15:00"
        type: string
      note:
        description: 세부 여행 메모
        type: string
      startDate:
        description: "세부 여행 시작시간 \t/예시  : 09:15:00"
        type: string
      title:
        description: 세부 여행 타이틀
        type: string
    type: object
  model.EncyclopediaDNFT:
    properties:
      dnftCountry:
        description: 국가
        type: string
      dnftId:
        description: 전체 dnftID
        type: integer
      dnftImgUrl:
        description: 이미지URL로 쓸 변수
        type: string
      dnftTier:
        description: 티어
        type: string
      dnftTime:
        description: 발급 시간
        type: string
      issueCount:
        description: 계정별, 국가별 발급횟수를 체크하는 변수
        type: integer
      latitude:
        description: 위도
        type: number
      longitude:
        description: 경도
        type: number
      walletAccount:
        description: 지갑계정
        type: string
    type: object
  model.TripPlan:
    properties:
      dayItems:
        description: days 아이템
        items:
          $ref: '#/definitions/model.DayItem'
        type: array
      nickName:
        description: 닉네임
        type: string
      tripArrival:
        description: 여행출발
        type: string
      tripCountry:
        description: 여행국가
        type: string
      tripDeparture:
        description: 여행도착
        type: string
      tripId:
        description: 여행계획 아이디
        type: integer
      tripTitle:
        description: 여행계획 제목
        type: string
      walletAccount:
        description: 지갑주소 계정
        type: string
    type: object
info:
  contact: {}
paths:
  /v01/acc/profile:
    get:
      consumes:
      - application/json
      description: Fetches user profile information. Gets the following information
        [nickname, number of travel plans, number of Dynamic NFTs, number of likes,
        number of comments].
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: nickName
        in: path
        name: nickName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
      summary: Enter your account address to get your profile information.
      tags:
      - UserProfileHandler(Get my profile information)
  /v01/acc/register:
    post:
      consumes:
      - application/json
      description: This function allows you to register and edit user nicknames, and
        you can do so by entering your wallet account and entering the desired nickname.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: nickName
        in: path
        name: nickName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
      summary: Enter your account address and nickname.
      tags:
      - UserRegisterHandler( You can register or edit your nickname. )
  /v01/badge/issue:
    post:
      consumes:
      - application/json
      description: It takes the latitude, longitude, and references the country's
        resources (IPFS URI, NFT METADATA) to issue the badge.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: latitude
        in: path
        name: latitude
        required: true
        type: string
      - description: longitude
        in: path
        name: longitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EncyclopediaDNFT'
            type: array
      summary: Enter your mumbai wallet account, latitude, and longitude.
      tags:
      - CreateBadge (issuing a badge)
  /v01/badge/user:
    get:
      consumes:
      - application/json
      description: Get all my DYNAMIC NFT badges
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EncyclopediaDNFT'
            type: array
      tags:
      - GetMyBadgeAll(get all my dynamic nft badges)
  /v01/trip/allplan:
    get:
      consumes:
      - application/json
      description: Function to fetch all trip plans from MongoDB. No parameters. Retrieves
        all.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Import all trip plans.
      tags:
      - GetAllTrip(Import all  trip plans.)
  /v01/trip/delete/:num:
    delete:
      consumes:
      - application/json
      description: Enter the /delete path followed by the trip id and the corresponding
        trip will be deleted.
      parameters:
      - description: tripId
        in: path
        name: tripId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Entering a tripid after delete will delete posts for that tripid.
      tags:
      - DeleteTrip(Delete my trip)
  /v01/trip/detail/:num:
    get:
      consumes:
      - application/json
      description: If you enter a trip id after the detail path, it will display the
        detail page of my trip plan.
      parameters:
      - description: tripId
        in: path
        name: tripId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Entering a tripid after detail will output the corresponding trip plan.
        ex) /detail/tripId
      tags:
      - GetDetailTrip(Prints the details page of my trip plan)
  /v01/trip/myplan:
    get:
      consumes:
      - application/json
      description: Import the itinerary you created from MongoDB.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Enter your wallet account to import your trip plans
      tags:
      - GetMyTrip(Importing my trip plans)
    post:
      consumes:
      - application/json
      description: DAYS has items in DAY1 and DAY2, and each DAY1 has time and imtes,
        and you can enter start time, end time, image, title, description, and notes.
        After inputting, a travel plan is created.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: tripTitle
        in: path
        name: tripTitle
        required: true
        type: string
      - description: tripCountry
        in: path
        name: tripCountry
        required: true
        type: string
      - description: tripDeparture
        in: path
        name: tripDeparture
        required: true
        type: string
      - description: tripArrival
        in: path
        name: tripArrival
        required: true
        type: string
      - description: dayItems
        in: path
        name: dayItems
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Enter the wallet account, title, country, departure date, arrival date,
        etc. days is an array containing the items.
      tags:
      - CreateTripPlan(Create my itinerary)
  /v01/trip/search:
    get:
      consumes:
      - application/json
      description: A search API that returns content for matching strings in the title
        of a travel plan, implemented on a word-by-word basis, e.g. q="South Korea".
      parameters:
      - description: q
        in: path
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: In Q, type the keyword you want to search for.
      tags:
      - SearchTrip(Search your travel plans by keyword)
  /v01/trip/simpleplan:
    patch:
      consumes:
      - application/json
      description: This API is used to make modifications such as patches based on
        existing trip IDs.
      parameters:
      - description: tripId
        in: path
        name: tripId
        required: true
        type: string
      - description: dayItems
        in: path
        name: dayItems
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Enter the wallet account, title, country, departure date, arrival date,
        etc. Add the data after the function that takes dayItems as input.
      tags:
      - PatchSimpleTripPlan(Modify my simple trip plan with the patch)
    post:
      consumes:
      - application/json
      description: DAYS has items in DAY1 and DAY2, and each DAY1 has time and imtes,
        and you can enter start time, end time, image, title, description, and notes.
      parameters:
      - description: walletAccount
        in: path
        name: walletAccount
        required: true
        type: string
      - description: triplTitle
        in: path
        name: triplTitle
        required: true
        type: string
      - description: tripCountry
        in: path
        name: tripCountry
        required: true
        type: string
      - description: tripDeparture
        in: path
        name: tripDeparture
        required: true
        type: string
      - description: tripArrival
        in: path
        name: tripArrival
        required: true
        type: string
      - description: dayItems
        in: path
        name: dayItems
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TripPlan'
            type: array
      summary: Enter the wallet account, title, country, departure date, arrival date,
        etc. days is an array containing the items. Here it is entered as an empty
        array.
      tags:
      - CreateSimpleTripPlan(Create my simple trip plan)
swagger: "2.0"
